import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;

import soot.Body;
import soot.Local;
import soot.Value;
import soot.ValueBox;
import soot.jimple.AssignStmt;
import soot.jimple.Stmt;
import soot.toolkits.graph.ExceptionalUnitGraph;
import soot.toolkits.graph.UnitGraph;
import soot.toolkits.scalar.ArraySparseSet;
import soot.toolkits.scalar.FlowSet;
import soot.toolkits.scalar.ForwardFlowAnalysis;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;



public class ReachVarAnalysis extends ForwardFlowAnalysis { // using RD Forward Flow
	Body b;

	FlowSet val; // to store must
	FlowSet mayval;
	//HashSet <String> must_r = new HashSet<String>();
	HashMap <String,Integer> must_r = new HashMap<String,Integer>();
	HashSet <String> may =new HashSet<String>();
	ArrayList <String> may_r = new ArrayList <String> ();
	HashSet <String> must =new HashSet<String>();
	HashSet <String> willnot =new HashSet<String>();
	ArrayList <String> willnot_r = new ArrayList <String> ();
	HashSet <String> dangerousVars = new HashSet<String>();
	HashMap <String , ArrayList<String>>hm = new HashMap();
	HashMap <String , Integer> has = new HashMap();
	HashMap <String , String> harsh_hm = new HashMap();
	HashMap <String , String> prn = new HashMap();
	ArrayList<String> harsh_arr = new ArrayList();

	private int flag=0;
	private String glo_str;

	LinkedList sCurrentLine_X = new LinkedList();
	String sCurrentLine;
	ArrayList <String> st = new ArrayList();

	ArrayList<String> ar1 = new ArrayList<String>();

	HashMap <String,HashMap<String,String>> funcAndInp = new HashMap();
	HashMap <String,String> funcAndArgs = new HashMap();
	HashMap <String , String> lhsrhs = new HashMap();

	int stringcount_a_method =0;
	int print_flag=0;

	ReachVarAnalysis(UnitGraph g)
	{  
		super(g);
		stringcount_a_method=0;
		ExceptionalUnitGraph ug=(ExceptionalUnitGraph)g;
		b=ug.getBody();
		//  System.out.println("getlocals" +b.getLocals().toString());
		//System.out.println("Method name is "+ b.getMethod().getName());
		String h= b.getMethod().getParameterTypes().toString();
		//System.out.println("the param type is "+ b.getMethod().getParameterTypes());
		//    System.out.println(b.getMethod().getDeclaration());
		//System.out.println(b.getMethod().getParameterTypes());
		String k= b.getMethod().getParameterTypes().toString();
		//    System.out.println(k.lastIndexOf("java.lang.String"));
		while(k.contains("java.lang.String"))
		{
			stringcount_a_method++;
			int  var =b.getMethod().getParameterCount();
			//System.out.println("the value of var is "+ var);
			//k.replaceFirst("java.lang.String" , "");
			//System.out.println(k);
			k=k.substring(0,k.lastIndexOf("java.lang.String"));
		}
		//        System.out.println("lo"+b.getLocals());
		//    System.out.println(stringcount_a_method);
		int tot_para = b.getMethod().getParameterCount();
		String h2 = (b.getLocals().toString());
		int len = h2.length();
		// System.out.println("retval="+h2);
		h2= h2.replace("[","");
		h2=h2.replace("]","");
		for(String retval: h2.split(","))
		{
			retval = retval.trim();
			ar1.add(retval);
		}
		// System.out.println("ar1 size is "+ ar1.size());
		int bound= ar1.size();
		/* for(int i=0;i<bound;i++)
    	{
    		System.out.println(ar1.get(i));
    		if(ar1.get(i).contains("this") || ar1.get(i).contains("temp$"))
    		{
    			ar1.remove(i);
    			bound--;
    		}	
    	}*/
		String v;
		Iterator i1=ar1.iterator();
		while(i1.hasNext())
		{
			v=(String) i1.next();
			if(v.contains("this") || v.contains("temp$"))
				i1.remove();
		}
		i1=ar1.iterator();
		int counter=0;
		//System.out.println("final ar1 is "+ ar1);
		while(i1.hasNext())
		{
			v=(String) i1.next();
			if(counter>b.getMethod().getParameterCount()-1)
			{
				i1.remove();
			}
			counter++;
		}
		has.put(b.getMethod().getName(), b.getMethod().getParameterCount());

		i1=ar1.iterator();
		counter=0;
		//System.out.println("middle ar1 is "+ ar1);
		while(i1.hasNext())
		{
			v=(String) i1.next();
			//System.out.println("current v is "+ v);
			if(!b.getMethod().getParameterType(counter).toString().equals("java.lang.String")&&!b.getMethod().getParameterType(counter).toString().equals("java.lang.String[]"))
			{
				i1.remove();
				//System.out.println("removing v is "+ v);
			}
			counter++;
		}
		funcAndArgs.put(b.getMethod().getName().toString(), ar1.toString());
		//System.out.println("now the hashmap funcAndArgs is "+ funcAndArgs);
		//System.out.println(b.getMethod().getParameterType(3));
		System.out.println("final ar1 is "+ ar1);
		doAnalysis();
	}

	@Override
	protected void flowThrough(Object out, Object unit, Object in) {
		// TODO Auto-generated method stub

		FlowSet inval=(FlowSet)in;
		val =(FlowSet)in;
		mayval =(FlowSet)in;

		FlowSet outval=(FlowSet)out;
		Stmt s=(Stmt)unit;
		outval.copy(inval);//change

		if(flag==1)
		{
			if(s.toString().contains(glo_str))
			{
				flag=0;
				Iterator box=s.getDefBoxes().iterator();
				while(box.hasNext())
				{
					final ValueBox vb=(ValueBox) box.next();
					Value v=vb.getValue();
					System.out.println("current val of scurrent list is "+ sCurrentLine_X);

					ListIterator<String> iterator = (ListIterator<String>) sCurrentLine_X.iterator(); 
					while (iterator.hasNext())
					{
						harsh_hm.put(iterator.next(), v.toString());
					}

				}
				//System.out.println("check it out "+sCurrentLine_X);
				//System.out.println("=======>>  current hashmap harsh_hm "+ harsh_hm);
			}

		}




		// System.out.println("here"+s);
		if(s.toString().startsWith("java.lang.String "))
		{
			String h=s.toString();
			h=h.replaceAll("java.lang.String" , "");
			h=h.trim();
			//System.out.println("h="+h);
		}



		if(s.toString().contains("staticinvoke"))
		{
			String funcName=s.toString();
			String para;
			para = funcName.substring(funcName.lastIndexOf("(")+1,funcName.lastIndexOf(")"));
			//System.out.println("the string para is now:- "+para);		



			String [] ar ;
			ar=para.split(",");
			//	System.out.println("Ashwin may go home ;( "+ar.toString());	


			int y=0;
			while(y<ar.length)
			{
				st.add(ar[y]);
				y++;
			}
			//	System.out.println(st);
			funcName = funcName.substring(0,funcName.indexOf("("));
			funcName = funcName.substring(funcName.lastIndexOf(" "));
			funcName = funcName.replaceAll("\\s" , "");
			//  	System.out.println("funcName"+funcName);
			hm.put(funcName, st);

		}


		Iterator i = s.getDefBoxes().iterator();
		while(i.hasNext()){
			final ValueBox vb_new=(ValueBox) i.next();
			Value v_new=vb_new.getValue();
			//      System.out.println("You suck:"+v_new);
			if(dangerousVars.contains(v_new.toString()))
			{
				dangerousVars.remove(v_new.toString());
			}

		}
		//   	System.out.println("You suck more:"+dangerousVars);







		if (s.toString().contains("java.util.Scanner: java.lang.String nextLine()")  )
		{  
			Iterator box=s.getDefBoxes().iterator();
			while(box.hasNext()){
				final ValueBox vb=(ValueBox) box.next();
				Value v=vb.getValue();
				dangerousVars.add(v.toString());
			}
			//System.out.println(s);
		}


		//        if (s.toString().contains("="))
		//        {
		//            String line="";
		//            line=s.toString();
		//            line=line.replace(" " , "");
		//            line = line.replace(";" , "");
		//            line =line.replaceAll("\\s", "");
		//          
		//            if (dangerousVars.contains(line.substring(line.indexOf("=")+1)))
		//            {  line = line.substring(0,line.indexOf("="));
		//                dangerousVars.add(line);
		//            }
		//            System.out.println("ar1="+ar1);
		//            if (ar1.contains(" "+line.substring(line.indexOf("=")+1)))
		//            {  line = line.substring(0,line.indexOf("="));
		//            	
		//                ar1.add(line);
		//                funcAndArgs.put(b.getMethod().getName().toString(), ar1.toString());
		//            }
		//
		//         
		//        }
		if(s.toString().contains(".<java.lang.StringBuffer: java.lang.StringBuffer append"))
		{
			String line="";
			line=s.toString();
			line=line.substring(line.indexOf(">")+2,line.lastIndexOf(")"));
			//     System.out.println(line+"ashwin was right somehow");
			if (dangerousVars.contains(line))
			{
				String line2 = s.toString();
				line2=line2.substring(line2.indexOf("invoke ")+7, line2.indexOf("."));
				//+7 for getting temp$ variable
				dangerousVars.add(line2);
				//   	 System.out.println("ashwin hahaha "  +dangerousVars );
			}
			if (ar1.contains(line))
			{
				String line2 = s.toString();
				line2=line2.substring(line2.indexOf("invoke ")+7, line2.indexOf("."));
				//+7 for getting temp$ variable
				ar1.add(line2);
				funcAndArgs.put(b.getMethod().getName().toString(), ar1.toString());
			}

		}

		//System.out.println(dangerousVars);


		//    System.out.println("Unit"+s.toString());
		//Kill operation
		Iterator box=s.getUseBoxes().iterator();

		//    System.out.println("Here");
		//    System.out.println(b.getLocals());

		if(s.toString().contains("staticinvoke") && s instanceof AssignStmt)
		{
			//System.out.println("s in earlier if is "+ s.toString());
			//System.out.println("method name is :- "+ b.getMethod().getName());

			String Name = s.toString();
			glo_str= Name;
			glo_str = glo_str.substring(0, Name.indexOf(' '));
			//System.out.println(" key name is "+ glo_str);
			flag=1;

			Name = Name.substring(0,Name.indexOf("("));
			Name = Name.substring(Name.lastIndexOf(" "));
			Name = Name+ "(";
			//System.out.println("final function name is  "+ Name.toString());

			//System.out.println("opening a file\n\n");
			sCurrentLine_X = new LinkedList();

			try (BufferedReader br = new BufferedReader(new FileReader("/home/aditya/workspace/Copy of Project_start1/sootOutput/project_S.jimple")))
			{



				while ((sCurrentLine = br.readLine()) != null) 
				{
					if(sCurrentLine.contains(Name) && !sCurrentLine.contains("staticinvoke"))
					{
						//System.out.println(sCurrentLine);
						while ((sCurrentLine = br.readLine()) != null &&  !sCurrentLine.contains("}") )
						{
							if(sCurrentLine.contains("return"))
							{
								sCurrentLine= sCurrentLine.substring(sCurrentLine.indexOf("return")+ 7, sCurrentLine.indexOf(";"));
								//System.out.println("=======>>>the return variable is => "+sCurrentLine);
								if(!sCurrentLine.equals("") && sCurrentLine !=null)
									sCurrentLine_X.add(sCurrentLine);
								//if( !sCurrentLine.equals("") && !dangerousVars.contains(sCurrentLine))


								//{//	dangerousVars.add(sCurrentLine);
								//System.out.println("danger is here " +dangerousVars );
								/*if(dangerousVars.contains(sCurrentLine))
    								{
    									System.out.println("   FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA        ");
    								}*/
								//}
							}

						}

					}
				}
				//System.out.println("size of array of string is "+ sCurrentLine_X);


			} 
			catch (IOException e) 
			{
				e.printStackTrace();
			}
			//System.out.println("ended the file file\n\n");

		}








		String printer ;
		if(s.toString().contains("<java.io.PrintStream: void println(java.lang.String)>")  )
		{
			printer = s.toString();
        	String printer2= new String();
        	printer = printer.substring(printer.lastIndexOf('(')+1, printer.lastIndexOf(')'));
        //	System.out.println("printer is "+ printer);
        	if(!printer.contains("\"")  && !printer.contains("temp$"))//trying to access variable
        	{
        		prn.put( printer ,b.getMethod().getName() );
        	}
		}
		if(s.toString().contains("<java.lang.StringBuffer: java.lang.StringBuffer append"))
		{  
			print_flag=1;
		//	System.out.println("the statement is=>> "+ s);
			printer = s.toString();
        	String printer2= new String();
        	printer = printer.substring(printer.lastIndexOf('(')+1, printer.lastIndexOf(')'));
        	if(!printer.contains("\"")) //trying to access variable
        	{
        		harsh_arr.add(printer);
        	}
		//	System.out.println("i am inside flag=1 declaration");
		}
		if(s.toString().contains("<java.lang.StringBuffer: java.lang.String toString") && print_flag==1 )
		{  
			print_flag=2;
		//	System.out.println("i am inside flag=2 declaration");
		}
		else if(s.toString().contains("PrintStream: void println") && print_flag==2 )
		{  
		//	System.out.println("the statement is=>> "+ s);
		//	System.out.println("i am inside flag=0 declaration");
			print_flag=0;
			
			
        	for(int k=0;k<harsh_arr.size();k++)
        	{
        		prn.put( harsh_arr.get(k) ,b.getMethod().getName() );
        	}
        //	System.out.println("current prn is "+ prn);
        	harsh_arr= new ArrayList<String>();
        	
		}
		else if(print_flag==2 )
		{
		//	System.out.println("the statement is=>> "+ s);
		//	System.out.println(" else part i am inside flag=0 declaration");
			print_flag=0;
			harsh_arr= new ArrayList<String>();
		}
		
			/*if(s.toString().contains("java.lang.StringBuffer append"))
			{
				printer = s.toString();
				printer = printer.substring(printer.lastIndexOf('(')+1, printer.lastIndexOf(')'));
				System.out.println("printer is "+ printer);
				if(!printer.contains("\""))//trying to access variable
				{
					prn.put( printer ,b.getMethod().getName() );
				}
			}
			if(s.toString().contains("java.io.PrintStream: void println"))
			{
				printer = s.toString();
				printer = printer.substring(printer.lastIndexOf('(')+1, printer.lastIndexOf(')'));
				System.out.println("printer is "+ printer);
				if(!printer.contains("\""))//trying to access variable
				{
					prn.put( printer ,b.getMethod().getName() );
				}
			}*/
			
        	


		



		while(box.hasNext() && !s.toString().contains("staticinvoke"))
		{

			final ValueBox vb=(ValueBox) box.next();
			Value v=vb.getValue();
			//System.out.println("current value of v are :- " + v);


			/*System.out.println("this method name is :- "+ b.getMethod().getName().toString());
            System.out.println("Truth value checking :- "+ b.getMethod().getName().toString().equals("main"));
            System.out.println("vb checking :- "+v.toString());
            System.out.println("another check args contained or not :- "+v.toString().contains("args")+" \n");*/
			/*if( b.getMethod().getName().toString().equals("main") && v.toString().contains("args["))
            {

            }*/
			/*    String printer ;
            if(s.toString().contains("virtualinvoke") && s.toString().contains("java.io.PrintStream"))
            {
            	printer = s.toString();
            	printer = printer.substring(printer.lastIndexOf('(')+1, printer.lastIndexOf(')'));
            	System.out.println("printer is "+ printer);


            }
			 *///change
			if(dangerousVars.contains(v.toString()) || (b.getMethod().getName().toString().equals("main") && v.toString().contains("args"))){
				//System.out.println("Here"+s);
				Iterator b = s.getDefBoxes().iterator();
				while(b.hasNext()){
					final ValueBox vb_new=(ValueBox) b.next();
					Value v_new=vb_new.getValue();
					dangerousVars.add(v_new.toString()); //Panga for c
				}
			}
			if (ar1.contains(v.toString())  )
			{  
				Iterator i1 = s.getDefBoxes().iterator();
				while(i1.hasNext()){
					final ValueBox vb_new=(ValueBox) i1.next();
					Value v_new=vb_new.getValue();
					ar1.add(v_new.toString());
					funcAndArgs.put(b.getMethod().getName().toString(), ar1.toString());

					lhsrhs.put(v_new.toString(), v.toString());
					//  System.out.println("I am right " + lhsrhs);




				}

			}
			//if(v instanceof Local && !v.toString().contains("$")&&!v.toString().equals("this"))
			//pruning $ and this
			//{ 
			//mayval.add(v);
			//may_r.add(v.toString());
			// may.add(v.toString());
			//    System.out.println("mayval" +mayval);
			//                if(!val.contains(v))
			//                {
			//                //val.add(v);
			//                }
			//if(!inval.contains(v))
			//    {
			//    System.out.println("Here in if of inaval" + v);
			inval.add(v);//}

			//outval.add(v);
			//System.out.println("Local in def boxes " + v);
			//}

			//    System.out.println("Current value of may_r " + may_r);





		}












		//  funcAndInp.put(b.getMethod().getName(), lhsrhs);
		Iterator box2 = b.getLocals().iterator();
		while(box2.hasNext())
		{
			//final ValueBox vb=(ValueBox) box2.next();
			Value v=(Value) box2.next();
			if(v instanceof Local && !v.toString().contains("$")&&!v.toString().equals("this"))
			{
				willnot.add(v.toString());
			}



		}

		//    Iterator I = outval.iterator();
		//        while(I.hasNext())
		//        {
		//            Value v = (Value) I.next();
		//            if(must_r.containsKey(v.toString()) && must_r.get(v.toString())>1)
		//            {
		//                must_r.put(v.toString(), 2);
		//            }
		//            else
		//            {
		//                must_r.put(v.toString(), 1);
		//            }
		//               
		//        }

		/*Chain<Local> localChain = b.getLocals();
        Iterator<Local> it = localChain.iterator();
        while(it.hasNext())
        {
        Local loc = it.next();
        //System.out.println("Local name = "+ loc.toString());
        }*/ //change


		//gen operation
		/*    box=s.getUseBoxes().iterator();
        while(box.hasNext())
        {
            final ValueBox vb=(ValueBox) box.next();
            Value v=vb.getValue();
            if(v instanceof Local)
            {   if(!val.contains(v))
                    val.add(v);
                outval.add(v);
                //System.out.println("Local in use boxes " + v);
            }
        }
        if(s instanceof IfStmt)
        {
            IfStmt is=(IfStmt)s;
            //System.out.println(inval);
        //    System.out.println("If is present");
        }*/
		//    System.out.println("Unit"+unit);
		//System.out.println("In"+inval);
		//    System.out.println("Out"+outval);
		val=outval;

		i = val.iterator(); // get latest copy to val
		must.clear();
		while(i.hasNext())
		{
			Value v1 = (Value) i.next();
			//            if(must.contains(v1.toString()))
			//            {
			//                must_r.add(v1.toString());
			//            }
			must.add(v1.toString());

		}



	}

	@Override
	protected void copy(Object src, Object dest) {
		// TODO Auto-generated method stub
		FlowSet srcSet=(FlowSet)src;
		FlowSet destSet=(FlowSet)dest;
		srcSet.copy(destSet);
	}

	@Override
	protected void merge(Object in1, Object in2, Object out) {
		// TODO Auto-generated method stub
		FlowSet inval1=(FlowSet)in1;
		FlowSet inval2=(FlowSet)in2;
		FlowSet outSet=(FlowSet)out;
		//    System.out.println();

		//    System.out.println("inval1 "  + inval1);
		//    System.out.println(" inval2 "  + inval2);
		//    System.out.println(" outset "  + outSet);
		//    inval1.union(inval2, outSet);
		inval1.intersection(inval2, outSet); // intersection for must analysis
		//    System.out.println("after merge inval1 "  + inval1);
		//    System.out.println("after merge inval2 "  + inval2);
		//    System.out.println("after merge outset "  + outSet);
		//    System.out.println();
		//    System.out.println("I am here");
		//    System.out.println(inval1);

	}





	@Override
	protected Object entryInitialFlow() {
		// TODO Auto-generated method stub

		return new ArraySparseSet();
	}

	@Override
	protected Object newInitialFlow() {
		// TODO Auto-generated method stub
		//return new ArraySparseSet();
		ArraySparseSet a = new ArraySparseSet();
		Iterator i = b.getLocals().iterator();//Initialising with complete set
		while(i.hasNext())
		{
			Value v2 = (Value) i.next();
			a.add(v2);
		}
		return a;
	}
	public void retval()
	{
		//return val;

		//      System.out.println("must be initialized " + must);
		//      System.out.println("must be redefined " + must);
		//    System.out.println("redifined must" + must_r);
	}


	public HashSet retDang(){
		System.out.println("The following variables are at risk of security vulnerabilities");
		Iterator i = dangerousVars.iterator();
		while(i.hasNext())
		{
			String s= (String) i.next();
			if(!s.startsWith("temp$")){
				System.out.println(s);
			}

		}
	//	System.out.println("Complete dang vars in reaching vars " + dangerousVars);
		return dangerousVars;
	}


	public HashMap retHash_funcAndArgs()
	{
		return funcAndArgs;
	}

	/*public void retwillnotval()
	{
		//mayval.difference(val,mayval);
		//return mayval;
		Iterator i = may.iterator();
		while(i.hasNext())
		{
			//Value v1 = (Value) i.next();
			willnot.remove(i.next());

		}
		System.out.println("will not be initialized " + willnot);
		Iterator i1 = willnot.iterator();
		while(i1.hasNext())
		{
			//Value v1 = (Value) i.next();
			willnot_r.add((String) i1.next());

		}
		//System.out.println("may_r" + may_r);
		for(int i11=0;i11<may_r.size();i11++)
		{
			int h = Collections.frequency(may_r, may_r.get(i11));
			if (h<=1)
			{
				willnot_r.add(may_r.get(i11));
			}
		}
		//System.out.println(may_r);
		System.out.println("will not be redefined " + willnot_r);
	}*/


	public HashMap retfuncAndInp()
	{
		funcAndInp.put(b.getMethod().getName(), lhsrhs);
		return funcAndInp;
	}

/*	public void retmayval()
	{
		//mayval.difference(val,mayval);
		//return mayval;
		Iterator i = val.iterator();
		System.out.println("may be initialized with sir's assumption " + may);
		while(i.hasNext())
		{
			Value v1 = (Value) i.next();
			may.remove(v1.toString());

		}
		System.out.println("may be initialized " + may);
		for(int i1=0;i1<willnot_r.size();i1++)
		{
			may.remove(willnot_r.get(i1));

		}

		System.out.println("may be redefined " + may);

	}*/

	public HashMap retkuchbhi()
	{
		return hm;
	}
	public HashMap rethas_string_count()
	{
		return has;
	}

	public HashMap retharsh()
	{   System.out.println("_-----------------------------------------------    "+harsh_hm);
	return harsh_hm;
	}

	public HashMap retprn()
	{
		return prn;
	}

}