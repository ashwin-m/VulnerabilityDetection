
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;

import soot.Body;
import soot.BodyTransformer;
import soot.toolkits.graph.ExceptionalUnitGraph;
import soot.toolkits.graph.UnitGraph;

public class Wrapper extends BodyTransformer{

	HashMap <String,String> funcAndArgs_wrapper = new HashMap();
	HashMap <String,String> wrapper_danger = new HashMap();
	HashMap <String,HashMap<String,String>> func_danger = new HashMap();
	HashMap <String,HashMap<String,String>> func_danger2 = new HashMap();
	HashSet <String> dangvang = new HashSet();
	HashSet <String> dangvang2 = new HashSet();
	HashMap <String , ArrayList> hm = new HashMap();
	HashMap <String , ArrayList> hm2 = new HashMap();
	HashMap <String , Integer> has =new HashMap();
	HashMap <String , Integer> has2 =new HashMap();
	HashMap <String , String>  harsh_hm2=new HashMap();
	HashMap <String , String>  harsh_hm=new HashMap();
	HashMap <String , String>  prn2=new HashMap();
	HashMap <String , String>  prn=new HashMap();
	@Override
	protected void internalTransform(Body b, String phase, Map options) {
		// TODO Auto-generated method stub
		if(!b.getMethod().toString().contains("<init>")) // to avoid call to constructor function
		{
		ExceptionalUnitGraph g=new ExceptionalUnitGraph(b);
	    ReachVarAnalysis live=new ReachVarAnalysis(g);
	//	System.out.println("ASAD");
	    System.out.println("\n \n Hey hey wrapper ");
		//System.out.println(live.rettmpval());
		//System.out.println(live.retmayval());
	    
	 //   live.retval();
		
	//	live.retwillnotval();
	funcAndArgs_wrapper=	live.retHash_funcAndArgs();
	dangvang2=live.retDang();
	Iterator i1 = funcAndArgs_wrapper.keySet().iterator();
	String v;//key
	String v2;//value
	while(i1.hasNext())
	{
		v=(String)i1.next();
		v2=(String)funcAndArgs_wrapper.get(v);
		wrapper_danger.put(v, v2);
		
	}
	i1=dangvang2.iterator();
	String v3;
	while(i1.hasNext())
	{v3=(String)i1.next();
		dangvang.add(v3);
	}
	while(i1.hasNext())
	{
		v=(String)i1.next();
		v2=(String)funcAndArgs_wrapper.get(v);
		wrapper_danger.put(v, v2);
		
	}
	func_danger2=live.retfuncAndInp();
	
	
	
	
	
	i1=func_danger2.keySet().iterator();
	String v4;//key
	HashMap v5;//value
	while(i1.hasNext())
	{
		v4=(String)i1.next();
		v5=(HashMap)func_danger2.get(v4);
		func_danger.put(v4, v5);
		
	}
	
	
	
	
	hm2=live.retkuchbhi();
	
	i1=hm2.keySet().iterator();
	String v6;//key
	ArrayList v7;//value
	while(i1.hasNext())
	{
		v6=(String)i1.next();
		v7=(ArrayList)hm2.get(v6);
		hm.put(v6, v7);
		
	}
	
	has2= live.rethas_string_count();
	
	
	
	
	
	i1=has2.keySet().iterator();
	String v10;
	Integer v11;
	while(i1.hasNext())
	{v10=(String)i1.next();
	v11=has2.get(v10);
	 has.put(v10,v11);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
	System.out.println("So far the hash of arraylists is " + wrapper_danger.toString());
	System.out.println("So far the dangvang  is " + dangvang.toString());
	System.out.println("So far the function hashmap  is " + func_danger.toString());
	System.out.println("So far the function hashmap 2 is " + hm.toString());
	System.out.println("So far the function hashmap for stringcount is " + has.toString());
	//live.retmayval();
	
	
	
	
	i1=hm.keySet().iterator(); 
	String v8;//key
	ArrayList v9;//value
	while(i1.hasNext())
	{
		v8=(String)i1.next();
	//	System.out.println("v8              " + v8);
		v9=(ArrayList)hm.get(v8);
	//	System.out.println("v9              " + v9);
		String arlst;
		for(int i=0;i<v9.size();i++)
		{
			String temp;
			int temp_index;
		//	System.out.println(dangvang );
			 if(dangvang.contains(((String)v9.get(i)).trim()))
			 {
			//	 System.out.println("v9.get(i)   "  + v9.get(i));
				 
				 temp=((String)v9.get(i)).trim();
				 temp_index=i%has.get(v8);
				// for(int j =0;j< wrapper_danger.size();j++)
				 
				arlst=	 wrapper_danger.get(v8);
			//	System.out.println("arlst" + arlst);
				 
				
			arlst=	arlst.replaceAll("\\s*", "");
			arlst=	arlst.replaceAll("]", "");
	//		System.out.println("arlst"+arlst);
			arlst=	arlst.replace("[", "");
			
			ArrayList <String> comma_sep =new ArrayList();
			for (String retval : arlst.split(","))
			{
				comma_sep.add(retval.toString());
			}
			dangvang.add(comma_sep.get(temp_index));
			 }
		}
		
		
	
		HashMap <String , String> temp_map = new HashMap();
		temp_map=func_danger.get(v8);
		Iterator i2 =  temp_map.keySet().iterator();
		String t1,t2;
		while(i2.hasNext())
		{
		 t1=(String) i2.next();
		 t2=(String)temp_map.get(t1);
		 if(dangvang.contains(t2))
		 {
			 dangvang.add(t1);
		 }
			
			
		}
		
		
	}
	
	
	
	
	harsh_hm2=live.retharsh();
//	System.out.println("-------------------- in wrapper "+harsh_hm2);
    i1=harsh_hm2.keySet().iterator();
    while(i1.hasNext())
    {
    	String v67=(String)i1.next();
    	String v76 = harsh_hm2.get(v67);
    	harsh_hm.put(v67, v76);
    	
    }
 //   System.out.println("-------------------- in wrapper "+harsh_hm);
    i1=harsh_hm.keySet().iterator();
    while(i1.hasNext())
    { String v67=(String)i1.next();
	String v76 = harsh_hm.get(v67);
    	
    	if(dangvang.contains(v67))
    			{
    		      dangvang.add(harsh_hm.get(v67));
    			}
    }
    
   
	
	i1=dangvang.iterator();
	String vg;
	while(i1.hasNext())
	{
         vg=(String)(i1.next());
        	if(vg.toString().contains("$"))	
        	{
        		i1.remove();
        	}
        		 
	}
    dangvang.add("args");
	System.out.println();
	System.out.println();
	System.out.println("Dangerous variables are " + dangvang.toString());
	System.out.println();
	System.out.println();
	
	
	 prn2=live.retprn();
	    i1=prn2.keySet().iterator();
	    while(i1.hasNext())
	    {
	    	String v67=(String)i1.next();
	    	String v76 = prn2.get(v67);
	    	prn.put(v67, v76);
	    	
	    }
	    
	    
	    i1=prn.keySet().iterator();
	    while(i1.hasNext())
	    { String v67=(String)i1.next();
		String v76 = prn.get(v67);
	    	
	    	if(dangvang.contains(v67))
	    			{
	    		     System.out.println();
	    		     System.out.println();
	    		     System.out.println (" MAJOR INFO LEAK in function "+ v76 + " because of printing variable " +v67 + " which is tainted ");
	    		     System.out.println();
	    		     System.out.println();
	    		     
	    			}
	    }
	    
	    
	    
	
	//System.out.println(prn);
	
	
	
	
	
	
	
	
	
	
	
	
	}
	}
}
